cmake_minimum_required(VERSION 3.0)

project(
    "Diffie-Hellman key generator"
    VERSION 0.3.2
    LANGUAGES C
)

set(OPENSSL_1_0_SOURCE_PATH)
set(OPENSSL_1_1_SOURCE_PATH)
set(OPENSSL_3_0_SOURCE_PATH)
set(OPENSSL_3_1_SOURCE_PATH)
set(BORINGSSL_SOURCE_PATH)
set(LIBRESSL_LIBRARY_PATH)
set(NSS_SOURCE_PATH)
set(GNUTLS_SOURCE_PATH)
set(WOLFSSL_SOURCE_PATH)

set(C_STANDARD C99)

if(MSVC)
    string(REGEX REPLACE "/W[1-3]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
else()
    add_compile_options(-Wall -Wextra)
endif()

find_package(PkgConfig REQUIRED)

pkg_check_modules(OPENSSL_1_0 libcrypto>=1.0.0 libcrypto<1.1.1)
pkg_check_modules(OPENSSL_1_1 libcrypto>=1.1.0 libcrypto<3.0)
pkg_check_modules(OPENSSL_3_0 libcrypto>=3.0)
pkg_check_modules(WOLFSSL wolfssl>=5.0)
find_library(MBEDTLS mbedcrypto)

if(OPENSSL_1_0_SOURCE_PATH)
    find_library(OPENSSL_1_0_LIBRARY crypto ${OPENSSL_1_0_SOURCE_PATH} NO_DEFAULT_PATH)

    if(NOT ${OPENSSL_1_0_LIBRARY} STREQUAL "OPENSSL_1_0_LIBRARY-NOTFOUND")
        cmake_path(APPEND OPENSSL_1_0_SOURCE_PATH "include" OUTPUT_VARIABLE OPENSSL_1_0_INCLUDE_PATH)
        add_executable(dh_key_gen_openssl_1_0 dh_key_gen_openssl.c dh_key_gen.c dh_params.c)
        target_include_directories(dh_key_gen_openssl_1_0 BEFORE PRIVATE ${OPENSSL_1_0_SOURCE_PATH} ${OPENSSL_1_0_INCLUDE_PATH})
        target_link_libraries(dh_key_gen_openssl_1_0 PRIVATE crypto)
    endif()
elseif(OPENSSL_1_0_FOUND)
    add_executable(dh_key_gen_openssl_1_0 dh_key_gen_openssl.c dh_key_gen.c dh_params.c)
    target_link_libraries(dh_key_gen_openssl_1_0 ${OPENSSL_1_0_LDFLAGS})
endif()

if(OPENSSL_1_1_SOURCE_PATH)
    find_library(OPENSSL_1_1_LIBRARY crypto ${OPENSSL_1_1_SOURCE_PATH} NO_DEFAULT_PATH)

    if(NOT ${OPENSSL_1_1_LIBRARY} STREQUAL "OPENSSL_1_1_LIBRARY-NOTFOUND")
        cmake_path(APPEND OPENSSL_1_1_SOURCE_PATH "include" OUTPUT_VARIABLE OPENSSL_1_1_INCLUDE_PATH)
        add_executable(dh_key_gen_openssl_1_1 dh_key_gen_openssl.c dh_key_gen.c dh_params.c)
        target_include_directories(dh_key_gen_openssl_1_1 BEFORE PRIVATE ${OPENSSL_1_1_INCLUDE_PATH})
        target_link_libraries(dh_key_gen_openssl_1_1 PRIVATE crypto)
    endif()
elseif(OPENSSL_1_1_FOUND)
    add_executable(dh_key_gen_openssl_1_1 dh_key_gen_openssl.c dh_key_gen.c dh_params.c)
    target_link_libraries(dh_key_gen_openssl_1_1 ${OPENSSL_1_1_LDFLAGS})
endif()

if(OPENSSL_3_0_SOURCE_PATH)
    find_library(OPENSSL_3_0_LIBRARY crypto ${OPENSSL_3_0_SOURCE_PATH} NO_DEFAULT_PATH)

    if(NOT ${OPENSSL_3_0_LIBRARY} STREQUAL "OPENSSL_3_0_LIBRARY-NOTFOUND")
        cmake_path(APPEND OPENSSL_3_0_SOURCE_PATH "include" OUTPUT_VARIABLE OPENSSL_3_0_INCLUDE_PATH)
        add_executable(dh_key_gen_openssl_3_0 dh_key_gen_openssl.c dh_key_gen.c dh_params.c)
        target_include_directories(dh_key_gen_openssl_3_0 BEFORE PRIVATE ${OPENSSL_3_0_INCLUDE_PATH})
        target_compile_definitions(dh_key_gen_openssl_3_0 PRIVATE -DOPENSSL_API_COMPAT=0x10101000L)
        target_link_libraries(dh_key_gen_openssl_3_0 PRIVATE crypto)
    endif()
elseif(OPENSSL_3_0_FOUND)
    add_executable(dh_key_gen_openssl_3_0 dh_key_gen_openssl.c dh_key_gen.c dh_params.c)
    target_compile_definitions(dh_key_gen_openssl_3_0 PRIVATE -DOPENSSL_API_COMPAT=0x10101000L)
    target_link_libraries(dh_key_gen_openssl_3_0 ${OPENSSL_3_0_LDFLAGS})
endif()

if(OPENSSL_3_1_SOURCE_PATH)
    find_library(OPENSSL_3_1_LIBRARY crypto ${OPENSSL_3_1_SOURCE_PATH} NO_DEFAULT_PATH)

    if(NOT ${OPENSSL_3_1_LIBRARY} STREQUAL "OPENSSL_3_1_LIBRARY-NOTFOUND")
        cmake_path(APPEND OPENSSL_3_1_SOURCE_PATH "include" OUTPUT_VARIABLE OPENSSL_3_1_INCLUDE_PATH)
        add_executable(dh_key_gen_openssl_3_1 dh_key_gen_openssl.c dh_key_gen.c dh_params.c)
        target_include_directories(dh_key_gen_openssl_3_1 BEFORE PRIVATE ${OPENSSL_3_1_INCLUDE_PATH})
        target_compile_definitions(dh_key_gen_openssl_3_1 PRIVATE -DOPENSSL_API_COMPAT=0x10101000L)
        target_link_libraries(dh_key_gen_openssl_3_1 PRIVATE crypto)
    endif()
endif()

if(NOT ${BORINGSSL_SOURCE_PATH} STREQUAL "")
    cmake_path(APPEND BORINGSSL_SOURCE_PATH "build/crypto" OUTPUT_VARIABLE BORINGSSL_LIBRARY_PATH_CRYPTO)
    find_library(BORINGSSL_LIBRARY_CRYPTO crypto ${BORINGSSL_LIBRARY_PATH_CRYPTO} NO_DEFAULT_PATH)

    if(NOT ${BORINGSSL_LIBRARY_CRYPTO} STREQUAL "BORINGSSL_LIBRARY_CRYPTO-NOTFOUND")
        cmake_path(APPEND BORINGSSL_SOURCE_PATH "include" OUTPUT_VARIABLE BORINGSSL_INCLUDE_PATH)

        add_executable(dh_key_gen_boringssl dh_key_gen_openssl.c dh_key_gen.c dh_params.c)
        target_include_directories(dh_key_gen_boringssl BEFORE PRIVATE ${BORINGSSL_INCLUDE_PATH})
        target_link_libraries(dh_key_gen_boringssl ${BORINGSSL_LIBRARY_CRYPTO})
        target_compile_definitions(dh_key_gen_boringssl PRIVATE)
    endif()
endif()

if(NOT ${LIBRESSL_SOURCE_PATH} STREQUAL "")
    cmake_path(APPEND LIBRESSL_SOURCE_PATH "crypto/.libs" OUTPUT_VARIABLE LIBRESSL_LIBRARY_PATH)
    find_library(LIBRESSL_LIBRARY crypto ${LIBRESSL_LIBRARY_PATH} NO_DEFAULT_PATH)

    if(NOT ${LIBRESSL_LIBRARY} STREQUAL "LIBRESSL_LIBRARY-NOTFOUND")
        cmake_path(APPEND LIBRESSL_SOURCE_PATH "include" OUTPUT_VARIABLE LIBRESSL_INCLUDE_PATH)

        add_executable(dh_key_gen_libressl dh_key_gen_openssl.c dh_key_gen.c dh_params.c)
        target_include_directories(dh_key_gen_libressl BEFORE PRIVATE ${LIBRESSL_INCLUDE_PATH})
        target_link_libraries(dh_key_gen_libressl ${LIBRESSL_LIBRARY})
        target_compile_definitions(dh_key_gen_libressl PRIVATE)
    endif()
endif()

if(NOT ${WOLFSSL_SOURCE_PATH} STREQUAL "")
    cmake_path(APPEND WOLFSSL_SOURCE_PATH "src" ".libs" OUTPUT_VARIABLE WOLFSSL_LIBRARY_PATH)
    find_library(WOLFSSL_LIBRARY wolfssl ${WOLFSSL_LIBRARY_PATH} NO_DEFAULT_PATH)

    if(NOT ${WOLFSSL_LIBRARY} STREQUAL "WOLFSSL_LIBRARY-NOTFOUND")
        cmake_path(APPEND WOLFSSL_SOURCE_PATH "" OUTPUT_VARIABLE WOLFSSL_INCLUDE_PATH)

        add_executable(dh_key_gen_wolfssl dh_key_gen_wolfssl.c dh_key_gen.c dh_params.c)
        target_include_directories(dh_key_gen_wolfssl BEFORE PRIVATE ${WOLFSSL_INCLUDE_PATH})
	target_link_libraries(dh_key_gen_wolfssl ${WOLFSSL_LIBRARY})
        target_compile_definitions(dh_key_gen_wolfssl PRIVATE)
    endif()
elseif(WOLFSSL_FOUND)
    add_executable(dh_key_gen_wolfssl dh_key_gen_wolfssl.c dh_key_gen.c dh_params.c)
    target_link_directories(dh_key_gen_wolfssl BEFORE PRIVATE "/home/coroner/src/ssl/src/wolfssl/src/.libs/")
    target_link_libraries(dh_key_gen_wolfssl ${WOLFSSL_LIBRARIES})
    target_compile_definitions(dh_key_gen_wolfssl PRIVATE)
endif()

if(MBEDTLS)
    add_executable(dh_key_gen_mbedtls dh_key_gen_mbedtls.c dh_key_gen.c dh_params.c)
    target_link_libraries(dh_key_gen_mbedtls mbedcrypto)
    target_compile_definitions(dh_key_gen_mbedtls PRIVATE)
endif()

if(NOT ${NSS_SOURCE_PATH} STREQUAL "")
    cmake_path(APPEND NSS_SOURCE_PATH "dist/public" OUTPUT_VARIABLE NSS_INCLUDE_PATH)
    cmake_path(APPEND NSS_SOURCE_PATH "nss/lib/nss/OBJS" OUTPUT_VARIABLE NSS_LIBRARY_PATH)
    cmake_path(APPEND NSS_SOURCE_PATH "nss/lib/freebl/OBJS" OUTPUT_VARIABLE FREEBL_ARCHIVE_PATH)
    cmake_path(APPEND NSS_SOURCE_PATH "nss/lib/util/OBJS" OUTPUT_VARIABLE NSS_UTIL_ARCHIVE_PATH)

    pkg_check_modules(NSPR REQUIRED nspr)

    find_library(FREEBL_ARCHIVE freebl ${FREEBL_ARCHIVE_PATH} NO_DEFAULT_PATH)
    find_library(NSS_LIBRARY nss3 ${NSS_LIBRARY_PATH} NO_DEFAULT_PATH)

    if(NOT ${FREEBL_ARCHIVE} STREQUAL "FREEBL_ARCHIVE-NOTFOUND")
        add_executable(dh_key_gen_nss dh_key_gen_nss.c dh_key_gen.c dh_params.c)
        set_property(TARGET dh_key_gen_nss PROPERTY POSITION_INDEPENDENT_CODE ON)
        target_include_directories(dh_key_gen_nss BEFORE PRIVATE ${NSPR_INCLUDE_DIRS} ${NSS_INCLUDE_PATH})
        target_link_directories(dh_key_gen_nss BEFORE PRIVATE ${NSS_LIBRARY_PATH} ${FREEBL_ARCHIVE_PATH} ${NSS_UTIL_ARCHIVE_PATH})
        target_link_libraries(dh_key_gen_nss :libfreebl.a :libnssutil.a nss3)
        target_link_libraries(dh_key_gen_nss ${NSS_LDFLAGS} ${NSPR_LDFLAGS})
        target_compile_definitions(dh_key_gen_nss PRIVATE)
    endif()
endif()

if(NOT ${GNUTLS_SOURCE_PATH} STREQUAL "")
    cmake_path(APPEND GNUTLS_SOURCE_PATH "lib" "includes" OUTPUT_VARIABLE GNUTLS_INCLUDE_PATH)
    cmake_path(APPEND GNUTLS_SOURCE_PATH "b4deb" "lib" "includes" OUTPUT_VARIABLE GNUTLS_BUILD_INCLUDE_PATH)
    cmake_path(APPEND GNUTLS_SOURCE_PATH "b4deb" "lib" ".libs" OUTPUT_VARIABLE GNUTLS_ARCHIVE_PATH)
    cmake_path(APPEND GNUTLS_SOURCE_PATH "lib" "nettle" ".libs" OUTPUT_VARIABLE CRYPTO_ARCHIVE_PATH)
    find_library(GNUTLS_LIBRARY libgnutls.a ${GNUTLS_ARCHIVE_PATH} NO_DEFAULT_PATH)
    find_library(CRYPTO_LIBRARY libcrypto.a ${CRYPTO_ARCHIVE_PATH} NO_DEFAULT_PATH)

    add_executable(dh_key_gen_gnutls dh_key_gen_gnutls.c dh_key_gen.c dh_params.c)
    set_property(TARGET dh_key_gen_gnutls PROPERTY POSITION_INDEPENDENT_CODE ON)
    target_include_directories(dh_key_gen_gnutls PRIVATE ${GNUTLS_INCLUDE_PATH} ${GNUTLS_BUILD_INCLUDE_PATH})
    target_link_directories(dh_key_gen_gnutls PRIVATE ${GNUTLS_ARCHIVE_PATH} ${CRYPTO_ARCHIVE_PATH})
    target_link_libraries(dh_key_gen_gnutls :libgnutls.a :libcrypto.a ${GNUTLS_LIBRARIES} nettle hogweed gmp zstd tasn1 unistring idn2 p11-kit brotlienc brotlidec z)
    target_compile_definitions(dh_key_gen_gnutls PRIVATE)
endif()
